%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.7.3 (Build 11D50) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 612 792
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 612 792
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 612 792 rc
324.45157 593.84161 m
324.45157 593.84161 328.51172 593.64526 326.20468 577.18707 c
326.16397 576.89661 356.4458 582.44641 356.4458 582.44641 c
352.93961 559.65601 l
352.93961 559.65601 354.25439 556.58801 357.32236 550.01385 c
360.39032 543.4397 366.33423 531.62042 370.03241 523.27893 c
375.6969 510.50244 375.75763 501.64807 367.40274 487.34021 c
357.77441 470.85156 344.13406 461.46527 332.30057 460.15045 c
320.46707 458.83563 312.06723 459.75897 306.21765 463.95276 c
301.42554 467.38837 296.40182 471.56219 296.40182 471.56219 c
296.40182 471.56219 273.61139 437.81488 246.8765 438.25317 c
220.1416 438.69141 217.9502 438.69141 217.9502 438.69141 c
242.93201 479.45123 l
242.93201 479.45123 255.64203 476.82153 262.65448 489.09332 c
269.66693 501.36511 297.27838 553.52014 297.27838 553.52014 c
297.27838 553.52014 279.74728 552.64355 274.92624 564.03876 c
270.10519 575.43396 279.2048 592.29602 286.32144 601.2923 c
291.05194 607.27222 297.86902 614.47681 306.70728 616.85071 c
312.13425 618.30835 317.90561 617.70593 323.26123 616.55939 c
329.39386 615.24652 332.77884 613.41797 337.59988 611.81097 c
h
f
1 0.38364232 0.093842983 sc
316.80383 603.95142 m
307.54865 591.52307 l
307.54865 591.52307 318.52142 590.6991 311.98734 577.81964 c
303.71869 561.52106 291.70535 566.89709 289.38712 567.61292 c
287.1026 568.31824 283.6297 568.8634 286.53851 576.79645 c
289.44727 584.72949 299.22266 600.33954 310.72183 604.74475 c
312.63104 605.47614 314.77649 604.21588 316.80383 603.95142 c
h
f
325.98972 481.50281 m
322.64465 481.66907 319.05658 482.1398 316.27618 484.18549 c
310.79706 488.21674 311.89075 496.06027 316.61469 500.19324 c
322.90408 505.69583 331.68784 505.63602 339.51419 504.58508 c
340.84222 494.92218 337.24915 482.40814 325.98972 481.50281 c
h
241.42702 450.67505 m
246.79849 450.78076 252.44345 451.21759 257.48709 453.20062 c
260.44794 454.36475 263.10733 456.32874 265.68381 458.15118 c
273.89972 463.96274 280.3522 471.00177 285.78711 479.45288 c
294.90527 493.63141 302.16574 508.72098 310.01999 523.59088 c
314.08801 531.2926 317.88956 540.27484 324.11908 546.51385 c
327.30859 534.61914 332.05267 524.10498 338.47913 513.57935 c
336.3313 513.00659 333.71005 513.27026 331.50156 513.06476 c
326.72589 512.62042 321.58771 512.04218 317.20828 509.94989 c
314.17108 508.4989 311.17676 506.25269 308.79749 503.88489 c
306.68393 501.78156 304.96252 499.30984 304.01456 496.46021 c
303.21027 494.04251 303.05273 492.20874 303.02014 489.65088 c
302.98282 486.72241 304.18259 483.84402 305.88312 481.51294 c
312.66656 472.21411 323.91898 471.35654 334.32718 474.53339 c
340.73303 476.48859 346.2739 480.08115 350.65399 485.17145 c
355.77206 491.11935 358.64966 498.07019 359.54236 505.8349 c
360.46088 513.82422 357.67361 520.24902 354.26862 527.25616 c
351.72321 532.49438 349.10489 537.69733 346.47186 542.89191 c
344.8295 546.13202 342.68549 549.44696 341.56262 552.92004 c
340.12476 557.36743 340.07034 561.89508 340.66437 566.49304 c
317.71948 561.81042 l
312.40533 553.2948 307.15167 544.67926 302.54242 535.75842 c
298.10974 527.17938 294.27069 518.30402 289.77924 509.74487 c
286.09604 502.72598 281.86591 496.01819 277.68304 489.28827 c
274.11374 483.54544 270.26846 478.71793 265.43384 473.98041 c
263.05063 471.64508 260.388 469.13635 257.16437 468.02271 c
255.18234 467.33801 252.8541 467.29971 250.75793 467.22137 c
240.14398 450.67609 l
240.57182 450.66913 240.9991 450.67249 241.42702 450.67505 c
h
241.42702 450.67505 m
f
1 1 1 sc
133.39328 468.54221 m
128.84393 468.7959 123.28442 469.84344 119.42686 472.47983 c
115.77001 474.97903 113.15918 479.15009 111.08317 482.95505 c
106.14831 491.99973 103.33083 502.16656 101.5637 512.26587 c
96.793869 539.52582 98.545273 568.29529 107.47889 594.54065 c
110.556 603.58069 114.35109 612.86865 119.73965 620.82214 c
135.07843 605.56329 153.70448 594.99536 175.05684 590.9624 c
180.34233 589.96411 185.70506 589.37183 191.08084 589.19305 c
193.30142 589.11926 196.2467 589.71027 198.40633 589.15552 c
195.55928 575.57166 191.91724 562.28516 188.08142 548.9491 c
182.23355 528.61774 175.07133 509.66782 162.63158 492.36905 c
155.4538 482.3876 146.9541 468.97604 133.39328 468.54221 c
h
132.73746 406.6825 m
189.65434 413.07281 228.06395 466.80569 248.35416 515.96997 c
252.4792 525.96521 255.99498 536.20886 258.96466 546.60468 c
262.37085 558.52856 265.04303 570.66284 266.99762 582.90802 c
267.83295 588.14124 268.62085 592.58148 269.3038 599.59052 c
286.37793 606.06824 301.15164 618.29865 313.18399 631.89124 c
280.8833 662.36359 l
271.19611 652.46313 l
271.08331 659.552 270.56403 666.64948 269.88397 673.70349 c
266.37146 710.13721 256.82056 748.87555 225.57115 771.79529 c
219.7446 776.06879 213.30127 779.47003 206.47612 781.84375 c
198.2543 784.70319 189.845 785.74023 181.19601 786.1012 c
170.74437 786.0661 160.39226 785.33276 150.45258 781.83954 c
119.71741 771.03796 98.108521 741.12677 93.181213 709.56519 c
77.633408 695.55396 66.306335 675.54236 57.121609 657.09058 c
48.895638 640.56494 41.615829 623.05017 36.931335 605.16809 c
31.604736 584.83502 29.996843 563.49976 30.166832 542.53949 c
30.307472 525.19824 31.586349 507.58493 35.436615 490.63852 c
43.093723 456.9368 66.335007 421.90134 100.16438 410.43347 c
110.77782 406.8356 121.61944 406.05728 132.73746 406.6825 c
h
203.60745 635.26013 m
191.57077 637.9942 181.26169 643.33154 172.99039 652.6759 c
161.31129 665.87006 155.17235 684.48059 159.22957 701.88989 c
160.2231 706.15314 161.83562 710.28406 164.09048 714.04022 c
165.51395 716.41138 167.20706 718.63232 169.17166 720.58191 c
170.80476 722.20258 172.64763 723.6488 174.69237 724.71637 c
188.03429 731.68201 197.44577 715.2995 200.65547 704.89844 c
201.50246 702.15369 201.9924 700.08453 202.60745 697.26019 c
204.26701 689.63947 204.88428 681.76135 205.16769 673.98187 c
205.6368 661.10571 205.14931 648.06012 203.60745 635.26013 c
h
f
1 0.38364232 0.093842983 sc
133.36011 455.88239 m
129.94995 455.96918 126.66077 456.37177 123.38402 457.3595 c
102.04136 463.79291 92.466812 485.13953 88.628326 505.37225 c
81.904434 540.81396 84.444687 579.86914 100.12531 612.6228 c
105.13081 623.07825 111.35061 633.71399 119.40631 642.16724 c
130.64326 626.16229 147.08618 611.66772 166.28064 606.66833 c
177.02893 603.86877 188.25163 602.92041 199.31987 602.52161 c
203.95633 602.35455 208.73326 602.74725 213.34903 602.32086 c
208.38509 562.28943 196.48862 521.24628 174.54236 487.05148 c
165.02127 472.21655 152.3168 456.66071 133.36011 455.88239 c
h
132.0246 421.30176 m
140.22989 421.76425 148.34393 422.99719 156.01752 426.06326 c
174.89145 433.60458 190.70988 449.09985 203.28677 464.62234 c
227.62747 494.66385 242.37827 530.9892 250.6787 568.47107 c
252.73694 577.76538 254.41006 587.14679 255.68962 596.5799 c
256.25867 600.77502 256.39569 605.12482 257.16797 609.28381 c
271.7959 613.4541 283.3205 621.07324 294.09283 631.82941 c
293.76672 632.96881 292.16898 634.112 291.36377 634.89117 c
289.09567 637.08594 286.74832 639.20691 284.34216 641.24921 c
283.42822 642.02496 282.20282 643.40991 280.99628 643.72852 c
273.89899 637.87354 266.40366 633.2655 258.50131 628.61713 c
257.85049 641.27588 258.70932 653.95142 257.87369 666.61322 c
255.23409 706.60938 242.65785 753.46863 201.37692 769.14618 c
193.95618 771.96442 186.47821 773.18304 178.60718 773.78302 c
168.60397 773.6759 159.12582 772.32538 149.94347 768.1076 c
125.70207 756.97272 108.38226 730.53607 106.50131 703.9505 c
100.39652 698.99487 95.483078 691.98407 90.69281 685.85846 c
79.602829 671.677 70.397995 657.07074 63.383671 640.43237 c
58.567551 629.0083 54.569336 617.24792 51.024418 605.37317 c
48.507301 596.94135 45.82795 588.39343 44.437099 579.68439 c
40.442886 554.67389 41.674995 528.02588 46.200523 503.19458 c
51.529476 473.95496 63.061657 444.39886 90.936417 430.14029 c
96.340942 427.37576 102.07558 425.27103 107.96301 423.80087 c
115.87297 421.82565 123.89371 421.16235 132.0246 421.30176 c
h
215.73975 623.14331 m
203.12575 623.31824 189.63699 624.32465 178.68153 631.16547 c
160.3157 642.63354 146.69479 666.40826 145.64349 687.90643 c
145.25241 695.90387 146.9971 703.84857 149.59332 711.37836 c
151.66165 717.37714 154.56543 723.21246 158.81213 727.97998 c
171.42302 742.13757 194.33694 740.78918 204.83981 725.12445 c
215.53117 709.17865 217.49892 689.28583 217.67773 670.65094 c
217.82968 654.81653 217.09291 638.92053 215.73975 623.14331 c
h
215.73975 623.14331 m
f
ep
end
%%Trailer
%%EOF
